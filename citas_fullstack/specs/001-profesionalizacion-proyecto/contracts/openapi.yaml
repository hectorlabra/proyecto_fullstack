openapi: 3.0.3
info:
  title: API de Gestión de Turnos
  version: 1.0.0
  description: |
    API REST para gestión de turnos médicos con autenticación de usuarios.

    Sistema full-stack construido con Node.js/TypeScript (backend), React (frontend) y PostgreSQL (base de datos).

    **Características**:
    - Registro y autenticación de usuarios
    - Gestión completa de turnos (crear, consultar, cancelar)
    - Validación robusta con DTOs
    - Seguridad con bcrypt para contraseñas

    **Documentación adicional**: Ver `/docs/api-examples.md` para ejemplos detallados.
  contact:
    name: Héctor Ignacio Labra Barros
    url: https://github.com/hectorlabra/proyecto_fullstack
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Desarrollo Local
  - url: https://[tu-api].onrender.com
    description: Producción (Render)
paths:
  /health:
    get:
      summary: Verificación de estado del servicio
      description: Endpoint de health check para verificar que la API está funcionando correctamente.
      tags:
        - Monitoreo
      responses:
        "200":
          description: Servicio operativo
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - timestamp
                  - uptime
                  - environment
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                    example: ok
                    description: Estado del servicio
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T10:30:00.000Z"
                    description: Timestamp actual del servidor
                  uptime:
                    type: number
                    example: 3600
                    description: Tiempo de actividad en segundos
                  environment:
                    type: string
                    enum: [development, production, test]
                    example: production
                    description: Entorno de ejecución
              examples:
                successful:
                  summary: Respuesta exitosa
                  value:
                    status: ok
                    timestamp: "2025-10-01T10:30:00.000Z"
                    uptime: 3600
                    environment: production
        "503":
          description: Servicio no disponible
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Servicio temporalmente no disponible

  /version:
    get:
      summary: Información de versión de la API
      description: Retorna la versión actual de la API y metadatos de build.
      tags:
        - Monitoreo
      responses:
        "200":
          description: Información de versión
          content:
            application/json:
              schema:
                type: object
                required:
                  - version
                  - apiName
                properties:
                  version:
                    type: string
                    pattern: '^\d+\.\d+\.\d+$'
                    example: "1.0.0"
                    description: Versión semántica de la API
                  apiName:
                    type: string
                    example: "API de Gestión de Turnos"
                    description: Nombre de la API
                  buildDate:
                    type: string
                    format: date
                    example: "2025-10-01"
                    description: Fecha de build
                  nodeVersion:
                    type: string
                    example: "18.x"
                    description: Versión de Node.js
              examples:
                production:
                  summary: Respuesta en producción
                  value:
                    version: "1.0.0"
                    apiName: "API de Gestión de Turnos"
                    buildDate: "2025-10-01"
                    nodeVersion: "18.x"

  /users/register:
    post:
      summary: Registrar nuevo usuario
      description: Crea un nuevo usuario con credenciales de autenticación.
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - birthdate
                - nDni
                - username
                - password
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "Juan Pérez"
                email:
                  type: string
                  format: email
                  example: "juan.perez@example.com"
                birthdate:
                  type: string
                  format: date
                  example: "1990-05-15"
                nDni:
                  type: string
                  pattern: '^\d{7,8}$'
                  example: "12345678"
                username:
                  type: string
                  minLength: 4
                  maxLength: 20
                  example: "juanperez"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "ContraseñaSegura123!"
      responses:
        "201":
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Usuario ya existe (email o username duplicado)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      summary: Iniciar sesión
      description: Autentica un usuario con sus credenciales.
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "juanperez"
                password:
                  type: string
                  format: password
                  example: "ContraseñaSegura123!"
      responses:
        "200":
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/UserBasic"
        "401":
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Credenciales inválidas"

  /users:
    get:
      summary: Obtener todos los usuarios
      description: Retorna la lista completa de usuarios registrados.
      tags:
        - Usuarios
      responses:
        "200":
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserBasic"

  /users/{id}:
    get:
      summary: Obtener usuario por ID
      description: Retorna los detalles de un usuario específico incluyendo sus turnos.
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID del usuario
      responses:
        "200":
          description: Detalles del usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /appointments:
    get:
      summary: Obtener todos los turnos
      description: Retorna la lista completa de turnos agendados.
      tags:
        - Turnos
      responses:
        "200":
          description: Lista de turnos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Appointment"

  /appointments/{id}:
    get:
      summary: Obtener turno por ID
      description: Retorna los detalles de un turno específico.
      tags:
        - Turnos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID del turno
      responses:
        "200":
          description: Detalles del turno
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "404":
          description: Turno no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /appointments/schedule:
    post:
      summary: Agendar nuevo turno
      description: Crea un nuevo turno para un usuario.
      tags:
        - Turnos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - time
                - userId
                - description
              properties:
                date:
                  type: string
                  format: date
                  example: "2025-10-15"
                time:
                  type: string
                  pattern: '^\d{2}:\d{2}$'
                  example: "10:00"
                userId:
                  type: integer
                  minimum: 1
                  example: 1
                description:
                  type: string
                  minLength: 5
                  maxLength: 500
                  example: "Consulta general"
      responses:
        "201":
          description: Turno creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /appointments/cancel/{id}:
    put:
      summary: Cancelar turno
      description: Cancela un turno existente cambiando su estado a "cancelled".
      tags:
        - Turnos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID del turno a cancelar
      responses:
        "200":
          description: Turno cancelado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "404":
          description: Turno no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - birthdate
        - nDni
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
        birthdate:
          type: string
          format: date
          example: "1990-05-15"
        nDni:
          type: string
          example: "12345678"
        credential:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "juanperez"
        appointments:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentBasic"

    UserBasic:
      type: object
      required:
        - id
        - name
        - email
        - nDni
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
        nDni:
          type: string
          example: "12345678"

    Appointment:
      type: object
      required:
        - id
        - date
        - time
        - status
        - userId
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: "2025-10-15"
        time:
          type: string
          example: "10:00"
        status:
          type: string
          enum: [active, cancelled]
          example: "active"
        description:
          type: string
          example: "Consulta general"
        userId:
          type: integer
          example: 1
        user:
          $ref: "#/components/schemas/UserBasic"

    AppointmentBasic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: "2025-10-15"
        time:
          type: string
          example: "10:00"
        status:
          type: string
          enum: [active, cancelled]
          example: "active"
        description:
          type: string
          example: "Consulta general"

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "Recurso no encontrado"
        message:
          type: string
          example: "El usuario con ID 1 no existe"

    ValidationError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "Validación fallida"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "email debe ser una dirección de email válida"

tags:
  - name: Monitoreo
    description: Endpoints de health check y versión
  - name: Usuarios
    description: Gestión de usuarios y autenticación
  - name: Turnos
    description: Gestión de turnos médicos
